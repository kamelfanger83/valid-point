Index: data/maps/1341.gr
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>lalo\r\n100 20\r\n1.5 12.5\r\n0.01\r\n0.0001\r\n0.2 0.85\r\n0\r\n1 11 1\r\n3 11 1\r\n5 11 1\r\n0 12 1\r\n0 13 1\r\n1 14 1\r\n3 14 1\r\n5 14 1\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/maps/1341.gr b/data/maps/1341.gr
--- a/data/maps/1341.gr	(revision a4a5130aba45a278229770bf0da26989489ef2b0)
+++ b/data/maps/1341.gr	(date 1674841755255)
@@ -1,10 +1,12 @@
-lalo
+Meditation
 100 20
-1.5 12.5
-0.01
-0.0001
-0.2 0.85
-0
+respawn: 1.5 12.5
+speed: 0.006
+crouch_speed: 0.008
+hitbox: 0.2 0.85
+creative: 0
+music: ./data/music/meditation.wav
+
 1 11 1
 3 11 1
 5 11 1
Index: utils/musicplayer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pygame import mixer\r\n\r\nclass Mussicplayer:\r\n    def __init__(self):\r\n        mixer.init()\r\n        mixer.music.set_volume(100)\r\n        self.song = \"\"\r\n\r\n    def setVolume(self, volume):\r\n        mixer.music.set_volume(volume)\r\n\r\n    def getVolume(self):\r\n        return mixer.music.get_volume()\r\n\r\n    def setSong(self, filename):\r\n        mixer.music.stop()\r\n        mixer.music.load(filename)\r\n        self.song = filename\r\n    def getSong(self):\r\n        return self.song\r\n\r\n    def startMusic(self):\r\n        mixer.music.play(loops=-1)\r\n\r\n    def stopMusic(self):\r\n        mixer.music.stop()\r\n\r\n    def pauseMusic(self):\r\n        mixer.music.pause()\r\n\r\n    def unpauseMusic(self):\r\n        mixer.music.unpause()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/musicplayer.py b/utils/musicplayer.py
--- a/utils/musicplayer.py	(revision a4a5130aba45a278229770bf0da26989489ef2b0)
+++ b/utils/musicplayer.py	(date 1674843827602)
@@ -3,30 +3,50 @@
 class Mussicplayer:
     def __init__(self):
         mixer.init()
-        mixer.music.set_volume(100)
+        mixer.Channel(0).set_volume(100)
+        mixer.Channel(1).set_volume(0)
+
         self.song = ""
+        self.volume = 100
+        self.active = 0
 
     def setVolume(self, volume):
-        mixer.music.set_volume(volume)
+        mixer.Channel(self.active).set_volume(volume)
+        self.volume = volume
 
     def getVolume(self):
-        return mixer.music.get_volume()
+        return self.volume
 
     def setSong(self, filename):
-        mixer.music.stop()
-        mixer.music.load(filename)
+        channel = 0
+
+        if self.active == 0:
+            channel = 1
+
+        mixer.Channel(channel).stop()
+        mixer.Channel(channel).play(mixer.Sound(filename), -1)
+        mixer.Channel(channel).pause()
+
         self.song = filename
     def getSong(self):
         return self.song
 
     def startMusic(self):
-        mixer.music.play(loops=-1)
+        channel = 0
+
+        if self.active == 0:
+            channel = 1
+
+        mixer.Channel(channel).unpause()
+        mixer.Channel(self.active).fadeout(1000)
+
+        self.active = channel
 
     def stopMusic(self):
-        mixer.music.stop()
+        mixer.Channel(self.active).stop()
 
     def pauseMusic(self):
-        mixer.music.pause()
+        mixer.Channel(self.active).pause()
 
     def unpauseMusic(self):
-        mixer.music.unpause()
\ No newline at end of file
+        mixer.Channel(self.active).unpause()
\ No newline at end of file
Index: windows/winwindow.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import buttons\r\nimport pygame\r\nimport sprites\r\nimport time\r\n\r\ndef show(bigSprite, screen, tile_size, activewindow, musicplayer):\r\n    start = time.time()\r\n\r\n    while time.time() - start < 3:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                exit(0)\r\n\r\n        bigSprite[\"win_screen\"].draw(screen, (0, 0))\r\n\r\n        pygame.display.update()\r\n        pygame.time.Clock().tick(60)\r\n\r\n    return \"menu\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/winwindow.py b/windows/winwindow.py
--- a/windows/winwindow.py	(revision a4a5130aba45a278229770bf0da26989489ef2b0)
+++ b/windows/winwindow.py	(date 1674838606140)
@@ -2,19 +2,31 @@
 import pygame
 import sprites
 import time
+import pygame
+import pyglet
+import ctypes
 
 def show(bigSprite, screen, tile_size, activewindow, musicplayer):
-    start = time.time()
+    player = pyglet.media.Player()
+    source = pyglet.media.load("./data/video/win.mp4")
+    player.queue(source)
+    player.play()
 
-    while time.time() - start < 3:
-        for event in pygame.event.get():
+    pygame.display.flip()
+
+    while True:
+        events = pygame.event.get()
+        for event in events:
             if event.type == pygame.QUIT:
-                pygame.quit()
-                exit(0)
+                sys.exit(0)
 
-        bigSprite["win_screen"].draw(screen, (0, 0))
+            screen.fill(0)
 
-        pygame.display.update()
-        pygame.time.Clock().tick(60)
+        player.dispatch_events()
+        tex = player.get_texture()
+        raw = tex.get_image_data().get_data('RGBA', tex.width * 4)
+        raw = ctypes.string_at(ctypes.addressof(raw), ctypes.sizeof(raw))
+        img = pygame.image.frombuffer(raw, (tex.width, tex.height), 'RGBA')
+        screen.blit(img, (0, 0))
 
-    return "menu"
+        pygame.display.flip()
